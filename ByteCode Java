// class version 63.0 (63) // klasa BubbleSortJava została skompilowana z wersją 63.0
// access flags 0x21 // klasa BubbleSortJava ma flagę dostępu o wartości 0x21
public class BubbleSortJava {

  // compiled from: BubbleSortJava.java // klasa BubbleSortJava jest kompilowana z pliku źródłowego BubbleSortJava.java
  // access flags 0x19 // klasa BubbleSortJava ma flagę dostępu o wartości 0x19
  public final static INNERCLASS java/lang/invoke/MethodHandles$Lookup java/lang/invoke/MethodHandles Lookup
  // deklaracja finalnej statycznej klasy INNERCLASS o nazwie Lookup typu java/lang/invoke/MethodHandles$Lookup

  // access flags 0x1 // konstruktor ma flagę dostępu 0x1 (publiczny)
  public <init>()V
  // deklaracja konstruktora dla klasy BubbleSortJava, inicjalizacja obiektu
   L0 //przypisanie etykiety L0
    LINENUMBER 1 L0 //następująca linia kodu źródłowego odpowiada linii 1 w oryginalnym kodzie Java
    ALOAD 0 //ładowanie bieżącej instancji na stos
    INVOKESPECIAL java/lang/Object.<init> ()V
    //wywołanie metody <init> nadklasy java/lang/Object w celu zainicjowania obiektu.
    RETURN //powrót z konstruktora
   L1 //przypisanie etykiety L1
    LOCALVARIABLE this LBubbleSortJava; L0 L1 0
    //deklaracja zmiennej lokalnej o nazwie this typu BubbleSortJava z początkiem w etykiecie L0 i końcem w etykiecie L1
    MAXSTACK = 1 //maksymalny rozmiar stosu wynosi 1
    MAXLOCALS = 1 //maksymalna liczba zmiennych lokalnych wynosi 1

  // access flags 0x0 // metoda ma flagę dostępu 0x0 (publiczny)
  bubbleSort([I)V
  // deklaracja metody bubbleSort, która przyjmuje tablicę liczb całkowitych ([I) jako parametr i zwraca wartość void
   L0
    LINENUMBER 3 L0 // następująca linia kodu źródłowego odpowiada linii 3 w oryginalnym kodzie Java
    ALOAD 1 // ładowanie odwołania do tablicy z pierwszej zmiennej lokalnej na stos
    ARRAYLENGTH //określenie długości tablicy i przesunieńcie jej na stos
    ISTORE 2 // zapisanie długości tablicy do zmiennej lokalnej 2
   L1
    LINENUMBER 4 L1 // następująca linia kodu źródłowego odpowiada linii 4 w oryginalnym kodzie Java
    ICONST_0 // przesunięcie stałej wartości 0 na stos
    ISTORE 3 // zapisanie wartości 0 do zmiennej lokalnej 3
   L2
   FRAME APPEND [I I] // zmiana w tablicy zmiennych lokalnych, dołączając zmienne lokalne
    ILOAD 3 // załadowanie wartości zmiennej lokalnej 3 (i) na stos
    ILOAD 2 // załadowanie wartości zmiennej lokalnej 2 (n, długość tablicy) na stos
    ICONST_1 // przesunięcie stałej wartości 1 na stos
    ISUB // odjęcie dwóch najwyższych wartości całkowitych na stosie
    IF_ICMPGE L3 // porównanie dwóch wartości całkowitych na stosie i rozgałęzienie do etykiety L3  (jeśli i >= n - 1)
   L4
    LINENUMBER 5 L4 // następująca linia kodu źródłowego odpowiada linii 5 w oryginalnym kodzie Java
    ICONST_0 // przesunięcie stałej wartości 0 na stos
    ISTORE 4 // zapisanie wartości 0 do zmiennej lokalnej 4
   L5
   FRAME APPEND [I] // zmiana w tablicy zmiennych lokalnych, dołączając zmienną lokalną
    ILOAD 4 // załadowanie wartości zmiennej lokalnej 4 (j) na stos
    ILOAD 2 // załadowanie wartości zmiennej lokalnej 2 (n, długość tablicy) na stos
    ILOAD 3 // załadowanie wartości zmiennej lokalnej 3 (i) na stos
    ISUB // odjęcie dwóch najwyższych wartości całkowitych na stosie
    ICONST_1 // przesunięcie stałej wartości 1 na stos
    ISUB // odjęcie dwóch najwyższych wartości całkowitych na stosie
    IF_ICMPGE L6 // porównanie dwóch wartości całkowitych na stosie i rozgałęzienie do etykiety L6  (jeśli  j >= n - i - 2)
   L7
    LINENUMBER 6 L7 // następująca linia kodu źródłowego odpowiada linii 6 w oryginalnym kodzie Java
    ALOAD 1 // ładowanie odwołania do tablicy z pierwszej zmiennej lokalnej na stos
    ILOAD 4 // załadowanie wartości zmiennej lokalnej 4 (j) na stos
    IALOAD // załadowanie liczby całkowitej o indeksie j na stos
    ALOAD 1 // ładowanie odwołania do tablicy z pierwszej zmiennej lokalnej na stos
    ILOAD 4 // załadowanie wartości zmiennej lokalnej 4 (j) na stos
    ICONST_1 // przesunięcie stałej wartości 1 na stos
    IADD // dodanie dwóch najwyższych wartości całkowitych na stosie
    IALOAD // załadowanie liczby całkowitej z tablicy o indeksie j+1 na stos
    IF_ICMPLE L8 // porównanie dwóch wartości całkowitych na stosie i rozgałęzienie do etykiety L8  (jeśli  arr[j] <= arr[j+1])
   L9
    LINENUMBER 7 L9 // następująca linia kodu źródłowego odpowiada linii 7 w oryginalnym kodzie Java
    ALOAD 1 // ładowanie odwołania do tablicy z pierwszej zmiennej lokalnej na stos
    ILOAD 4 // załadowanie wartości zmiennej lokalnej 4 (j) na stos
    IALOAD // załadowanie liczby całkowitej z tablicy o indeksie j na stos
    ISTORE 5 // zapisanie wartości na szczycie stosu do zmiennej lokalnej 4
   L10
    LINENUMBER 8 L10
    ALOAD 1
    ILOAD 4
    ALOAD 1
    ILOAD 4
    ICONST_1
    IADD
    IALOAD
    IASTORE // zapisanie wartości całkowitej na szczycie stosu
   L11
    LINENUMBER 9 L11
    ALOAD 1
    ILOAD 4
    ICONST_1
    IADD
    ILOAD 5
    IASTORE
   L8
    LINENUMBER 5 L8
   FRAME SAME // wskazanie ramki z tymi samymi zmiennymi lokalnymi i stosem co poprzednia ramka
    IINC 4 1 // zwiększenie wartości zmiennej lokalnej 4 (j) o 1
    GOTO L5 // przeskoczenie do etykiety L5 (iteracja pętli)
   L6
    LINENUMBER 4 L6
   FRAME CHOP 1 // zmiana w tablicy zmiennych lokalnych, usuwając jedną zmienną lokalną
    IINC 3 1
    GOTO L2 // przeskoczenie do etykiety L2 (iteracja pętli)
   L3
    LINENUMBER 11 L3
   FRAME CHOP 1
    RETURN // wyjście z metody
   L12
    LOCALVARIABLE temp I L10 L8 5 // definicja zmiennych lokalnych i ich zakresów: temp, j, i, this, arr i n
    LOCALVARIABLE j I L5 L6 4
    LOCALVARIABLE i I L2 L3 3
    LOCALVARIABLE this LBubbleSortJava; L0 L12 0
    LOCALVARIABLE arr [I L0 L12 1
    LOCALVARIABLE n I L1 L12 2
    MAXSTACK = 5 // maksymalna głębokość stosu wymaganą przez metodę
    MAXLOCALS = 6 // całkowita liczbę zmiennych lokalnych używanych przez metodę

  // access flags 0x0
  printArray([I)V
  // deklaracja metody printArray, która przyjmuje tablicę liczb całkowitych ([I) jako parametr i zwraca wartość void
   L0
    LINENUMBER 14 L0 // następująca linia kodu źródłowego odpowiada linii 14 w oryginalnym kodzie Java
    ALOAD 1
    ASTORE 2 // zapisanie odwołania do tablicy w zmiennej lokalnej 2 (n, długość tablicy)
    ALOAD 2
    ARRAYLENGTH
    ISTORE 3
    ICONST_0
    ISTORE 4
   L1
   FRAME APPEND [[I I I] // dołączenie ramki, dodając trzy dodatkowe zmienne lokalne do ramki: odwołanie do tablicy i dwie liczby całkowite
    ILOAD 4
    ILOAD 3
    IF_ICMPGE L2 // porównanie dwóch wartości całkowitych na stosie i rozgałęzienie do etykiety L2  (zakończenie pętli)
    ALOAD 2
    ILOAD 4
    IALOAD
    ISTORE 5
   L3
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;
    // pobranie referencji do pola out klasy System
    ILOAD 5
    INVOKEDYNAMIC makeConcatWithConstants(I)Ljava/lang/String; [
      // handle kind 0x6 : INVOKESTATIC
      java/lang/invoke/StringConcatFactory.makeConcatWithConstants(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
      // arguments:
      "\u0001 "
    ]
    // wywołanie dynamicznej metody makeConcatWithConstants
    INVOKEVIRTUAL java/io/PrintStream.print (Ljava/lang/String;)V
    // wywołanie metody print na obiekcie PrintStream
   L4
    IINC 4 1
    GOTO L1
   L2
    LINENUMBER 15 L2
   FRAME CHOP 3
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;
    INVOKEVIRTUAL java/io/PrintStream.println ()V
   L5
    LINENUMBER 16 L5
    RETURN
   L6
    LOCALVARIABLE j I L3 L4 5
    LOCALVARIABLE this LBubbleSortJava; L0 L6 0
    LOCALVARIABLE arr [I L0 L6 1
    MAXSTACK = 2
    MAXLOCALS = 6

  // access flags 0x9
  public static main([Ljava/lang/String;)V
  // deklaracja metody main, która przyjmuje tablicę obiektów String jako dane wejściowe i zwraca void
   L0
    LINENUMBER 19 L0
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;
    LDC "Java bubble sort"
    // przesunięcie stringa "Java bubble sort" na stos
    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V
   L1
    LINENUMBER 20 L1
    NEW BubbleSortJava // stworzenie nowej instancję klasy BubbleSortJava
    DUP // zduplikowanie referencji do nowo utworzonego obiektu na stosie
    INVOKESPECIAL BubbleSortJava.<init> ()V // wywołanie konstruktora klasy BubbleSortJava
    ASTORE 1
   L2
    LINENUMBER 21 L2
    ICONST_5
    NEWARRAY T_INT // stworzenie nowej tablicy liczb całkowitych o długości 5
    DUP
    ICONST_0
    ICONST_5
    IASTORE
    DUP
    ICONST_1
    ICONST_1
    IASTORE
    DUP
    ICONST_2
    ICONST_4
    IASTORE
    DUP
    ICONST_3
    ICONST_2
    IASTORE
    DUP
    ICONST_4
    BIPUSH 8 // przesunięcie stałej 8 na stos, przypisanie wartości 8 do elementu tablicy liczb całkowitych
    IASTORE
    ASTORE 2
   L3
    LINENUMBER 22 L3
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;
    LDC "Unsorted array"
    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V
   L4
    LINENUMBER 23 L4
    ALOAD 1
    ALOAD 2
    INVOKEVIRTUAL BubbleSortJava.printArray ([I)V
   L5
    LINENUMBER 24 L5
    ALOAD 1
    ALOAD 2
    INVOKEVIRTUAL BubbleSortJava.bubbleSort ([I)V
   L6
    LINENUMBER 25 L6
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;
    LDC "Sorted array"
    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V
   L7
    LINENUMBER 26 L7
    ALOAD 1
    ALOAD 2
    INVOKEVIRTUAL BubbleSortJava.printArray ([I)V
   L8
    LINENUMBER 27 L8
    RETURN
   L9
    LOCALVARIABLE args [Ljava/lang/String; L0 L9 0
    LOCALVARIABLE ob LBubbleSortJava; L2 L9 1
    LOCALVARIABLE arr [I L3 L9 2
    MAXSTACK = 4
    MAXLOCALS = 3
}